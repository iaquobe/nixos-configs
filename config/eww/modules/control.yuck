;          󰌗
;  󰂯 󰆐󰑫󰖩󰤯󰤮󰤨
;󰀟󰂎



(include "./modules/control/components.yuck")

(defvar wifi-menu-show false)
(defvar bluetooth-menu-show false)
(defvar power-menu-show false)
(defvar volume-menu-show false)
(defvar brightness-menu-show false)


(defwidget wifi []
  (dualbutton :name "󰖩"
    :primary ""
    :secondary "$HOME/.config/eww/scripts/toggle_variable.sh wifi-menu-show")
)

(defwidget bluetooth []
  (dualbutton :name "󰂯"
    :primary ""
    :secondary "$HOME/.config/eww/scripts/toggle_variable.sh bluetooth-menu-show")
)

(defwidget eth []
  (singlebutton :name "󰌗" :primary "")
)

(defwidget power []
  (singlebutton :name "" 
    :primary "$HOME/.config/eww/scripts/toggle_variable.sh power-menu-show"
  )
)

(defwidget wifi-menu []
  (revealer 
    :transition "slidedown" 
    :reveal wifi-menu-show
    (box
      :class "submenu"
      "wifi"
      (button 
        :onclick "eww close control-center"
        "")
      (button 
        :onclick "eww close control-center"
        "")
      (button 
        :onclick "eww close control-center"
        "")
      (button 
        :onclick "eww close control-center"
        "")
    )
  )
)

(defwidget bluetooth-menu []
  (revealer 
    :transition "slidedown" 
    :reveal bluetooth-menu-show
    (box
      :class "submenu"
      "bluetooth"
    )
  )
)

(defwidget power-menu []
  (revealer 
    :transition "slidedown" 
    :reveal power-menu-show
    (box
      :class "submenu"
      (button 
        :class "highlight"
        :onclick "eww close control-center"
        "")
      (button 
        :class "highlight"
        :onclick "eww close control-center"
        "")
      (button 
        :class "highlight"
        :onclick "eww close control-center"
        "")
      (button 
        :class "highlight"
        :onclick "eww close control-center"
        "")
    )
  )
)

(defwidget volume []
  (box 
    :orientation "v"
    (slider :name ""
      :value "${volume}"
      :change "pactl set-sink-volume @DEFAULT_SINK@ {}%"
      :primary ""
      :secondary "$HOME/.config/eww/scripts/toggle_variable.sh volume-menu-show"
    )
  )
)

(defwidget brightness []
  (box
    :orientation "v"
    (slider 
      :name "" 
      :value "50" 
      :change ""
      :primary ""
      :secondary "$HOME/.config/eww/scripts/toggle_variable.sh brightness-menu-show"
    )
  )
)


(defwidget volume-menu []
  (revealer 
    :transition "slidedown" 
    :reveal volume-menu-show
    (box
      :class "submenu"
      "volume"
    )
  )
)

(defwidget brightness-menu []
  (revealer 
    :transition "slidedown" 
    :reveal brightness-menu-show
    (box
      :class "submenu"
      "brightness"
    )
  )
)


(defwidget performance []
  (box
  :class "performance"
    (eventbox 
      :class "singlebutton"
      :onclick "kitty btm &"
      (box :orientation "v"
        (box
          (box :class "circle" 
            (circular-progress :clockwise false :start-at 75 :thickness 4 :class "cpu" 
              :value "${EWW_CPU.avg}" ""))
          (box :class "circle" 
            (circular-progress :clockwise false :start-at 75 :thickness 4 :class "ram" 
              :value "${EWW_RAM.used_mem_perc}" ""))
        )
        (box
          (box :class "circle" 
            (circular-progress :clockwise false :start-at 75 :thickness 4 :class "dsk" 
              :value "${EWW_DISK["/"].used_perc}"  ""))
          (box :class "circle" 
            (circular-progress :clockwise false :start-at 75 :thickness 4 :class "bty" 
              :value "${EWW_BATTERY.status}" "󰂎"))
       )
      )
    )
  )
)

(defwidget control-center []
  (box 
    :class "control-center"
    :space-evenly false
    :orientation "v"
    (box :orientation "h" 
      (wifi)
      (bluetooth)
      (eth)
      (power))
    (wifi-menu)
    (bluetooth-menu)
    (power-menu)
    (volume)
    (volume-menu)
    (brightness)
    (brightness-menu)
    (box 
      (box :orientation "v"
        (box 
          (singlebutton :name "" :primary "$(sleep 0.1s; grim -g \"$(slurp)\")&")
          (singlebutton :name "" :primary "")
          )
        (button :class "singlebutton" "music"))
      (performance)
    )
  )
)


(defwindow control-center
  :monitor 0
  :geometry (geometry :x "1%"
                      :y "5%"
                      :anchor "top right"
  )
  (control-center)
)
